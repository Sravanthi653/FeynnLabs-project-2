# 📦 Import libraries
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score
from xgboost import XGBRegressor
import matplotlib.pyplot as plt
import seaborn as sns

# 📥 Load or create your dataset
df = pd.DataFrame({
    "Income (₹/month)": [45000, 25000, 62000, 30000, 55000, 18000, 70000, 40000, 22000, 60000],
    "Family_Size": [4, 5, 3, 6, 3, 7, 2, 5, 6, 3],
    "House_Type": ["Owned", "Rented", "Owned", "Rented", "Owned", "Rented", "Owned", "Rented", "Owned", "Owned"],
    "Electricity_Usage (kWh)": [180, 90, 220, 100, 150, 70, 240, 130, 80, 210],
    "Urban_Rural": ["Urban", "Rural", "Urban", "Rural", "Urban", "Rural", "Urban", "Urban", "Rural", "Urban"],
    "Fridge": [1, 0, 1, 1, 1, 0, 1, 1, 0, 1],
    "Washing_Machine": [1, 0, 1, 0, 1, 0, 1, 1, 0, 1],
    "AC": [0, 0, 1, 0, 1, 0, 1, 0, 0, 1],
    "TV": [1, 1, 1, 0, 1, 0, 1, 1, 0, 1]
})

# 🔄 Encode categorical variables
df['House_Type'] = LabelEncoder().fit_transform(df['House_Type'])  # Owned = 1, Rented = 0
df['Urban_Rural'] = LabelEncoder().fit_transform(df['Urban_Rural'])  # Urban = 1, Rural = 0

# ➕ Add target variable: total number of appliances owned
df['Total_Appliances'] = df[['Fridge', 'Washing_Machine', 'AC', 'TV']].sum(axis=1)

# 🔢 Define features (X) and target (y)
X = df.drop(columns=['Fridge', 'Washing_Machine', 'AC', 'TV', 'Total_Appliances'])
y = df['Total_Appliances']

# 📏 Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# ✂ Split data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

# ⚙ Train XGBoost Regressor
model = XGBRegressor()
model.fit(X_train, y_train)

# 📈 Predict
y_pred = model.predict(X_test)

# 🧪 Evaluate
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"MAE: {mae:.2f}, R²: {r2:.2f}")

# 📊 Plot predicted vs actual
plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_pred, color='royalblue')
plt.plot([0, 4], [0, 4], '--', color='gray')
plt.title(f'XGBoost Prediction: Appliance Ownership\\nMAE: {mae:.2f}, R²: {r2:.2f}')
plt.xlabel('Actual Total Appliances Owned')
plt.ylabel('Predicted')
plt.grid(True)
plt.tight_layout()
plt.show()